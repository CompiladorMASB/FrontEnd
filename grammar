program
  : block
;

block
  : '{' decls stmts '}'
;

decls
  : decl*
;

decl
  : type Id ';'
;

type
  : type '[' Int ']'
  | Basic
;

stmts
  : stmt*
;

stmt
  : loc '=' bool ';'
  | 'if' '(' bool ')' stmt
  |'if' '(' bool ')' stmt 'else' stmt
  |'while' '(' bool ')' stmt
  |'do' stmt 'while' '(' bool ')' ';'
  |'break' ';'
  |block
;

loc
  : loc '[' bool ']'
  | Id
;

bool
  : bool '||' join
  | join
;

join
  : join '&&' equality
  | equality
;

equality
  : equality '==' rel
  | equality '!=' rel
  | rel
;

rel
  : expr '<' expr
  | expr '<=' expr
  | expr '>=' expr
  | expr '>' expr
  | expr
;

expr
  : expr '+' term
  | expr '-' term
  | term
;

term
  : term '*' unary
  | term '/' unary
  | unary
;

unary 
  : '!' unary
  | '-' unary
  | factor
;

factor
  : '(' bool ')'
  | loc
  | Int
  | Float
  | 'true'
  | 'false'
;

/* Parser */

Float
  : [0-9]+ '.' [0-9]+
;

Int
  : [0-9]+
;

Basic
  : 'int'  
  | 'float'
  | 'char' 
  | 'bool'
;

Id
  : [a-zA-Z_] [a-zA-Z0-9_]*
;

Whitespace
  : [ \t\r\n] -> skip
;